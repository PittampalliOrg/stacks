apiVersion: v1
kind: Namespace
metadata:
  name: backstage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backstage
  namespace: backstage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backstage-argo-worfklows
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: read-all
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backstage-argo-worfklows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: backstage-argo-worfklows
subjects:
  - kind: ServiceAccount
    name: backstage
    namespace: backstage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backstage-read-all
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: read-all
subjects:
  - kind: ServiceAccount
    name: backstage
    namespace: backstage
---
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: backstage
spec:
  ports:
    - name: http
      port: 7007
      targetPort: http
  selector:
    app: backstage
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgresql
  name: postgresql
  namespace: backstage
spec:
  clusterIP: None
  ports:
    - name: postgres
      port: 5432
  selector:
    app: postgresql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: backstage
  annotations:
    argocd.argoproj.io/sync-wave: "20"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      containers:
        - name: backstage
          image: ghcr.io/pittampalliorg/backstage-app:v25
          env:
            - name: LOG_LEVEL
              value: debug
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            - name: NODE_ENV
              value: production
          envFrom:
            - secretRef:
                name: backstage-env-vars
            - secretRef:
                name: gitea-credentials
            - secretRef:
                name: argocd-credentials
          ports:
            - containerPort: 7007
              name: http
      serviceAccountName: backstage
      imagePullSecrets:
        - name: ghcr-dockercfg
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: postgresql
  name: postgresql
  namespace: backstage
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  serviceName: service-postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: backstage-env-vars
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: backstage-env-vars
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backstage-env-vars
                  key: POSTGRES_PASSWORD
          image: docker.io/library/postgres:15.3-alpine3.18
          name: postgres
          ports:
            - containerPort: 5432
              name: postgresdb
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 300Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "500Mi"
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: backstage
  namespace: backstage
spec:
  length: 36
  digits: 5
  symbols: 5
  symbolCharacters: "/-+"
  noUpper: false
  allowRepeat: true
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: backstage-session
  namespace: backstage
spec:
  length: 64
  digits: 10
  symbols: 10
  symbolCharacters: "/-+="
  noUpper: false
  allowRepeat: true
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backstage-oidc
  namespace: backstage
spec:
  secretStoreRef:
    name: keycloak
    kind: ClusterSecretStore
  refreshInterval: "0"
  target:
    name: backstage-env-vars
    template:
      engineVersion: v2
      data:
        BACKSTAGE_FRONTEND_URL: https://cnoe.localtest.me:8443/backstage
        POSTGRES_HOST: postgresql.backstage.svc.cluster.local
        POSTGRES_PORT: '5432'
        POSTGRES_DB: backstage
        POSTGRES_USER: backstage
        POSTGRES_PASSWORD: "{{.POSTGRES_PASSWORD}}"
        BACKSTAGE_SESSION_SECRET: "{{.SESSION_SECRET}}"
        ARGO_WORKFLOWS_URL: https://cnoe.localtest.me:8443/argo-workflows
        KEYCLOAK_NAME_METADATA: https://cnoe.localtest.me:8443/keycloak/realms/cnoe/.well-known/openid-configuration
        KEYCLOAK_CLIENT_SECRET: "{{.BACKSTAGE_CLIENT_SECRET}}"
        ARGOCD_AUTH_TOKEN: "argocd.token={{.ARGOCD_SESSION_TOKEN}}"
        ARGO_CD_URL: 'https://argocd-server.argocd.svc.cluster.local/api/v1/'
  data:
    - secretKey: ARGOCD_SESSION_TOKEN
      remoteRef:
        key: keycloak-clients
        property: ARGOCD_SESSION_TOKEN
    - secretKey: BACKSTAGE_CLIENT_SECRET
      remoteRef:
        key: keycloak-clients
        property: BACKSTAGE_CLIENT_SECRET
  dataFrom:
    - sourceRef:
        generatorRef:
          apiVersion: generators.external-secrets.io/v1alpha1
          kind: Password
          name: backstage
      rewrite:
        - transform:
            template: "POSTGRES_PASSWORD"
    - sourceRef:
        generatorRef:
          apiVersion: generators.external-secrets.io/v1alpha1
          kind: Password
          name: backstage-session
      rewrite:
        - transform:
            template: "SESSION_SECRET"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: gitea-credentials
  namespace: backstage
spec:
  secretStoreRef:
    name: gitea
    kind: ClusterSecretStore
  refreshInterval: "0"
  target:
    name: gitea-credentials
  data:
    - secretKey: GITEA_USERNAME
      remoteRef:
        key: gitea-credential
        property: username
    - secretKey: GITEA_PASSWORD
      remoteRef:
        key: gitea-credential
        property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ghcr-dockercfg-external
  namespace: backstage
  labels:
    app.kubernetes.io/name: ghcr-dockercfg
    app.kubernetes.io/part-of: backstage
  annotations:
    argocd.argoproj.io/sync-wave: "-10"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: azure-keyvault-store
    kind: ClusterSecretStore
  target:
    name: ghcr-dockercfg
    creationPolicy: Owner
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: |
          {
            "auths": {
              "ghcr.io": {
                "username": "pittampalliorg",
                "password": "{{ .pat }}",
                "auth": "{{ printf "%s:%s" "pittampalliorg" .pat | b64enc }}"
              }
            }
          }
  data:
    - secretKey: pat
      remoteRef:
        key: GITHUB-PAT
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backstage
  namespace: backstage
spec:
  ingressClassName: "nginx"
  rules:
    - host: localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backstage
                port:
                  name: http
    - host: cnoe.localtest.me
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backstage
                port:
                  name: http