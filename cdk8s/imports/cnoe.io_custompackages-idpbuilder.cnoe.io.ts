// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema CustomPackage
 */
export class CustomPackage extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CustomPackage"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'idpbuilder.cnoe.io/v1alpha1',
    kind: 'CustomPackage',
  }

  /**
   * Renders a Kubernetes manifest for "CustomPackage".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CustomPackageProps = {}): any {
    return {
      ...CustomPackage.GVK,
      ...toJson_CustomPackageProps(props),
    };
  }

  /**
   * Defines a "CustomPackage" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CustomPackageProps = {}) {
    super(scope, id, {
      ...CustomPackage.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CustomPackage.GVK,
      ...toJson_CustomPackageProps(resolved),
    };
  }
}

/**
 * @schema CustomPackage
 */
export interface CustomPackageProps {
  /**
   * @schema CustomPackage#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CustomPackageSpec controls the installation of the custom applications.
   *
   * @schema CustomPackage#spec
   */
  readonly spec?: CustomPackageSpec;

}

/**
 * Converts an object of type 'CustomPackageProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CustomPackageProps(obj: CustomPackageProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CustomPackageSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * CustomPackageSpec controls the installation of the custom applications.
 *
 * @schema CustomPackageSpec
 */
export interface CustomPackageSpec {
  /**
   * @schema CustomPackageSpec#argoCD
   */
  readonly argoCd?: CustomPackageSpecArgoCd;

  /**
   * @schema CustomPackageSpec#gitServerAuthSecretRef
   */
  readonly gitServerAuthSecretRef: CustomPackageSpecGitServerAuthSecretRef;

  /**
   * GitServerURL specifies the base URL for the git server for API calls.
   * for example, https://gitea.cnoe.localtest.me:8443
   *
   * @schema CustomPackageSpec#gitServerURL
   */
  readonly gitServerUrl: string;

  /**
   * InternalGitServeURL specifies the base URL for the git server accessible within the cluster.
   * for example, http://my-gitea-http.gitea.svc.cluster.local:3000
   *
   * @schema CustomPackageSpec#internalGitServeURL
   */
  readonly internalGitServeUrl: string;

  /**
   * RemoteRepositorySpec specifies information about remote repositories.
   *
   * @schema CustomPackageSpec#remoteRepository
   */
  readonly remoteRepository: CustomPackageSpecRemoteRepository;

  /**
   * Replicate specifies whether to replicate remote or local contents to the local gitea server.
   *
   * @schema CustomPackageSpec#replicate
   */
  readonly replicate: boolean;

}

/**
 * Converts an object of type 'CustomPackageSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CustomPackageSpec(obj: CustomPackageSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'argoCD': toJson_CustomPackageSpecArgoCd(obj.argoCd),
    'gitServerAuthSecretRef': toJson_CustomPackageSpecGitServerAuthSecretRef(obj.gitServerAuthSecretRef),
    'gitServerURL': obj.gitServerUrl,
    'internalGitServeURL': obj.internalGitServeUrl,
    'remoteRepository': toJson_CustomPackageSpecRemoteRepository(obj.remoteRepository),
    'replicate': obj.replicate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema CustomPackageSpecArgoCd
 */
export interface CustomPackageSpecArgoCd {
  /**
   * ApplicationFile specifies the absolute path to the ArgoCD application file
   *
   * @schema CustomPackageSpecArgoCd#applicationFile
   */
  readonly applicationFile: string;

  /**
   * @schema CustomPackageSpecArgoCd#name
   */
  readonly name: string;

  /**
   * @schema CustomPackageSpecArgoCd#namespace
   */
  readonly namespace: string;

  /**
   * @schema CustomPackageSpecArgoCd#type
   */
  readonly type: CustomPackageSpecArgoCdType;

}

/**
 * Converts an object of type 'CustomPackageSpecArgoCd' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CustomPackageSpecArgoCd(obj: CustomPackageSpecArgoCd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationFile': obj.applicationFile,
    'name': obj.name,
    'namespace': obj.namespace,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema CustomPackageSpecGitServerAuthSecretRef
 */
export interface CustomPackageSpecGitServerAuthSecretRef {
  /**
   * @schema CustomPackageSpecGitServerAuthSecretRef#name
   */
  readonly name: string;

  /**
   * @schema CustomPackageSpecGitServerAuthSecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'CustomPackageSpecGitServerAuthSecretRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CustomPackageSpecGitServerAuthSecretRef(obj: CustomPackageSpecGitServerAuthSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * RemoteRepositorySpec specifies information about remote repositories.
 *
 * @schema CustomPackageSpecRemoteRepository
 */
export interface CustomPackageSpecRemoteRepository {
  /**
   * @schema CustomPackageSpecRemoteRepository#cloneSubmodules
   */
  readonly cloneSubmodules: boolean;

  /**
   * @schema CustomPackageSpecRemoteRepository#path
   */
  readonly path: string;

  /**
   * Ref specifies the specific ref supported by git fetch
   *
   * @schema CustomPackageSpecRemoteRepository#ref
   */
  readonly ref: string;

  /**
   * Url specifies the url to the repository containing the ArgoCD application file
   *
   * @schema CustomPackageSpecRemoteRepository#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'CustomPackageSpecRemoteRepository' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_CustomPackageSpecRemoteRepository(obj: CustomPackageSpecRemoteRepository | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloneSubmodules': obj.cloneSubmodules,
    'path': obj.path,
    'ref': obj.ref,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * @schema CustomPackageSpecArgoCdType
 */
export enum CustomPackageSpecArgoCdType {
  /** Application */
  APPLICATION = "Application",
  /** ApplicationSet */
  APPLICATION_SET = "ApplicationSet",
}

