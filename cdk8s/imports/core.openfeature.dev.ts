// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Flagd is the Schema for the flagds API
 *
 * @schema Flagd
 */
export class Flagd extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Flagd"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.openfeature.dev/v1beta1',
    kind: 'Flagd',
  }

  /**
   * Renders a Kubernetes manifest for "Flagd".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: FlagdProps = {}): any {
    return {
      ...Flagd.GVK,
      ...toJson_FlagdProps(props),
    };
  }

  /**
   * Defines a "Flagd" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: FlagdProps = {}) {
    super(scope, id, {
      ...Flagd.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Flagd.GVK,
      ...toJson_FlagdProps(resolved),
    };
  }
}

/**
 * Flagd is the Schema for the flagds API
 *
 * @schema Flagd
 */
export interface FlagdProps {
  /**
   * @schema Flagd#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * FlagdSpec defines the desired state of Flagd
   *
   * @schema Flagd#spec
   */
  readonly spec?: FlagdSpec;

}

/**
 * Converts an object of type 'FlagdProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_FlagdProps(obj: FlagdProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_FlagdSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * FlagdSpec defines the desired state of Flagd
 *
 * @schema FlagdSpec
 */
export interface FlagdSpec {
  /**
   * FeatureFlagSource references to a FeatureFlagSource from which the created flagd instance retrieves
   * the feature flag configurations
   *
   * @schema FlagdSpec#featureFlagSource
   */
  readonly featureFlagSource: string;

  /**
   * Ingress
   *
   * @schema FlagdSpec#ingress
   */
  readonly ingress?: FlagdSpecIngress;

  /**
   * Replicas defines the number of replicas to create for the service.
   * Default: 1
   *
   * @schema FlagdSpec#replicas
   */
  readonly replicas?: number;

  /**
   * ServiceAccountName the service account name for the flagd deployment
   *
   * @schema FlagdSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * ServiceType represents the type of Service to create.
   * Must be one of: ClusterIP, NodePort, LoadBalancer, and ExternalName.
   * Default: ClusterIP
   *
   * @schema FlagdSpec#serviceType
   */
  readonly serviceType?: FlagdSpecServiceType;

}

/**
 * Converts an object of type 'FlagdSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_FlagdSpec(obj: FlagdSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'featureFlagSource': obj.featureFlagSource,
    'ingress': toJson_FlagdSpecIngress(obj.ingress),
    'replicas': obj.replicas,
    'serviceAccountName': obj.serviceAccountName,
    'serviceType': obj.serviceType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Ingress
 *
 * @schema FlagdSpecIngress
 */
export interface FlagdSpecIngress {
  /**
   * Annotations the annotations to be added to the ingress
   *
   * @schema FlagdSpecIngress#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Enabled enables/disables the ingress for flagd
   *
   * @schema FlagdSpecIngress#enabled
   */
  readonly enabled?: boolean;

  /**
   * FlagdPath is the path to be used for accessing the flagd flag evaluation API
   * Default: /flagd.evaluation.v1.Service
   *
   * @schema FlagdSpecIngress#flagdPath
   */
  readonly flagdPath?: string;

  /**
   * Hosts list of hosts to be added to the ingress.
   * Empty string corresponds to rule with no host.
   *
   * @schema FlagdSpecIngress#hosts
   */
  readonly hosts: string[];

  /**
   * IngressClassName defines the name if the ingress class to be used for flagd
   *
   * @schema FlagdSpecIngress#ingressClassName
   */
  readonly ingressClassName?: string;

  /**
   * OFREPPath is the path to be used for accessing the OFREP API
   * Default: /ofrep
   *
   * @schema FlagdSpecIngress#ofrepPath
   */
  readonly ofrepPath?: string;

  /**
   * PathType is the path type to be used for the ingress rules
   *
   * @schema FlagdSpecIngress#pathType
   */
  readonly pathType?: string;

  /**
   * SyncPath is the path to be used for accessing the sync API
   * Default: /flagd.sync.v1.Service
   *
   * @schema FlagdSpecIngress#syncPath
   */
  readonly syncPath?: string;

  /**
   * TLS configuration for the ingress
   *
   * @schema FlagdSpecIngress#tls
   */
  readonly tls?: FlagdSpecIngressTls[];

}

/**
 * Converts an object of type 'FlagdSpecIngress' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_FlagdSpecIngress(obj: FlagdSpecIngress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'enabled': obj.enabled,
    'flagdPath': obj.flagdPath,
    'hosts': obj.hosts?.map(y => y),
    'ingressClassName': obj.ingressClassName,
    'ofrepPath': obj.ofrepPath,
    'pathType': obj.pathType,
    'syncPath': obj.syncPath,
    'tls': obj.tls?.map(y => toJson_FlagdSpecIngressTls(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * ServiceType represents the type of Service to create.
 * Must be one of: ClusterIP, NodePort, LoadBalancer, and ExternalName.
 * Default: ClusterIP
 *
 * @schema FlagdSpecServiceType
 */
export enum FlagdSpecServiceType {
  /** ClusterIP */
  CLUSTER_IP = "ClusterIP",
  /** NodePort */
  NODE_PORT = "NodePort",
  /** LoadBalancer */
  LOAD_BALANCER = "LoadBalancer",
  /** ExternalName */
  EXTERNAL_NAME = "ExternalName",
}

/**
 * IngressTLS describes the transport layer security associated with an ingress.
 *
 * @schema FlagdSpecIngressTls
 */
export interface FlagdSpecIngressTls {
  /**
   * hosts is a list of hosts included in the TLS certificate. The values in
   * this list must match the name/s used in the tlsSecret. Defaults to the
   * wildcard host setting for the loadbalancer controller fulfilling this
   * Ingress, if left unspecified.
   *
   * @default the
   * @schema FlagdSpecIngressTls#hosts
   */
  readonly hosts?: string[];

  /**
   * secretName is the name of the secret used to terminate TLS traffic on
   * port 443. Field is left optional to allow TLS routing based on SNI
   * hostname alone. If the SNI host in a listener conflicts with the "Host"
   * header field used by an IngressRule, the SNI host is used for termination
   * and value of the "Host" header is used for routing.
   *
   * @schema FlagdSpecIngressTls#secretName
   */
  readonly secretName?: string;

}

/**
 * Converts an object of type 'FlagdSpecIngressTls' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_FlagdSpecIngressTls(obj: FlagdSpecIngressTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hosts': obj.hosts?.map(y => y),
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */


/**
 * InProcessConfiguration is the Schema for the inprocesconfigurations API
 *
 * @schema InProcessConfiguration
 */
export class InProcessConfiguration extends ApiObject {
  /**
   * Returns the apiVersion and kind for "InProcessConfiguration"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.openfeature.dev/v1beta1',
    kind: 'InProcessConfiguration',
  }

  /**
   * Renders a Kubernetes manifest for "InProcessConfiguration".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: InProcessConfigurationProps = {}): any {
    return {
      ...InProcessConfiguration.GVK,
      ...toJson_InProcessConfigurationProps(props),
    };
  }

  /**
   * Defines a "InProcessConfiguration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: InProcessConfigurationProps = {}) {
    super(scope, id, {
      ...InProcessConfiguration.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...InProcessConfiguration.GVK,
      ...toJson_InProcessConfigurationProps(resolved),
    };
  }
}

/**
 * InProcessConfiguration is the Schema for the inprocesconfigurations API
 *
 * @schema InProcessConfiguration
 */
export interface InProcessConfigurationProps {
  /**
   * @schema InProcessConfiguration#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * InProcessConfigurationSpec defines the desired state of InProcessConfiguration
   *
   * @schema InProcessConfiguration#spec
   */
  readonly spec?: InProcessConfigurationSpec;

}

/**
 * Converts an object of type 'InProcessConfigurationProps' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_InProcessConfigurationProps(obj: InProcessConfigurationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_InProcessConfigurationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * InProcessConfigurationSpec defines the desired state of InProcessConfiguration
 *
 * @schema InProcessConfigurationSpec
 */
export interface InProcessConfigurationSpec {
  /**
   * Cache
   *
   * @schema InProcessConfigurationSpec#cache
   */
  readonly cache?: string;

  /**
   * CacheMaxSize
   *
   * @schema InProcessConfigurationSpec#cacheMaxSize
   */
  readonly cacheMaxSize?: number;

  /**
   * EnvVarPrefix defines the prefix to be applied to all environment variables applied to the sidecar, default FLAGD
   *
   * @schema InProcessConfigurationSpec#envVarPrefix
   */
  readonly envVarPrefix?: string;

  /**
   * EnvVars
   *
   * @schema InProcessConfigurationSpec#envVars
   */
  readonly envVars?: InProcessConfigurationSpecEnvVars[];

  /**
   * Host
   *
   * @schema InProcessConfigurationSpec#host
   */
  readonly host?: string;

  /**
   * OfflineFlagSourcePath
   *
   * @schema InProcessConfigurationSpec#offlineFlagSourcePath
   */
  readonly offlineFlagSourcePath?: string;

  /**
   * Port defines the port to listen on, defaults to 8015
   *
   * @schema InProcessConfigurationSpec#port
   */
  readonly port?: number;

  /**
   * Selector
   *
   * @schema InProcessConfigurationSpec#selector
   */
  readonly selector?: string;

  /**
   * SocketPath defines the unix socket path to listen on
   *
   * @schema InProcessConfigurationSpec#socketPath
   */
  readonly socketPath?: string;

  /**
   * TLS
   *
   * @schema InProcessConfigurationSpec#tls
   */
  readonly tls?: boolean;

}

/**
 * Converts an object of type 'InProcessConfigurationSpec' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_InProcessConfigurationSpec(obj: InProcessConfigurationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cache': obj.cache,
    'cacheMaxSize': obj.cacheMaxSize,
    'envVarPrefix': obj.envVarPrefix,
    'envVars': obj.envVars?.map(y => toJson_InProcessConfigurationSpecEnvVars(y)),
    'host': obj.host,
    'offlineFlagSourcePath': obj.offlineFlagSourcePath,
    'port': obj.port,
    'selector': obj.selector,
    'socketPath': obj.socketPath,
    'tls': obj.tls,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * EnvVar represents an environment variable present in a Container.
 *
 * @schema InProcessConfigurationSpecEnvVars
 */
export interface InProcessConfigurationSpecEnvVars {
  /**
   * Name of the environment variable. Must be a C_IDENTIFIER.
   *
   * @schema InProcessConfigurationSpecEnvVars#name
   */
  readonly name: string;

  /**
   * Variable references $(VAR_NAME) are expanded
   * using the previously defined environment variables in the container and
   * any service environment variables. If a variable cannot be resolved,
   * the reference in the input string will be unchanged. Double $$ are reduced
   * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
   * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
   * Escaped references will never be expanded, regardless of whether the variable
   * exists or not.
   * Defaults to "".
   *
   * @default .
   * @schema InProcessConfigurationSpecEnvVars#value
   */
  readonly value?: string;

  /**
   * Source for the environment variable's value. Cannot be used if value is not empty.
   *
   * @schema InProcessConfigurationSpecEnvVars#valueFrom
   */
  readonly valueFrom?: InProcessConfigurationSpecEnvVarsValueFrom;

}

/**
 * Converts an object of type 'InProcessConfigurationSpecEnvVars' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_InProcessConfigurationSpecEnvVars(obj: InProcessConfigurationSpecEnvVars | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_InProcessConfigurationSpecEnvVarsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Source for the environment variable's value. Cannot be used if value is not empty.
 *
 * @schema InProcessConfigurationSpecEnvVarsValueFrom
 */
export interface InProcessConfigurationSpecEnvVarsValueFrom {
  /**
   * Selects a key of a ConfigMap.
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef;

  /**
   * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
   * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFrom#fieldRef
   */
  readonly fieldRef?: InProcessConfigurationSpecEnvVarsValueFromFieldRef;

  /**
   * Selects a resource of the container: only resources limits and requests
   * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef;

  /**
   * Selects a key of a secret in the pod's namespace
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'InProcessConfigurationSpecEnvVarsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_InProcessConfigurationSpecEnvVarsValueFrom(obj: InProcessConfigurationSpecEnvVarsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_InProcessConfigurationSpecEnvVarsValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selects a key of a ConfigMap.
 *
 * @schema InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef
 */
export interface InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef {
  /**
   * The key to select.
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef(obj: InProcessConfigurationSpecEnvVarsValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
 * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
 *
 * @schema InProcessConfigurationSpecEnvVarsValueFromFieldRef
 */
export interface InProcessConfigurationSpecEnvVarsValueFromFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'InProcessConfigurationSpecEnvVarsValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_InProcessConfigurationSpecEnvVarsValueFromFieldRef(obj: InProcessConfigurationSpecEnvVarsValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selects a resource of the container: only resources limits and requests
 * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
 *
 * @schema InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef
 */
export interface InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef#divisor
   */
  readonly divisor?: InProcessConfigurationSpecEnvVarsValueFromResourceFieldRefDivisor;

  /**
   * Required: resource to select
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef(obj: InProcessConfigurationSpecEnvVarsValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Selects a key of a secret in the pod's namespace
 *
 * @schema InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef
 */
export interface InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
export function toJson_InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef(obj: InProcessConfigurationSpecEnvVarsValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */

/**
 * Specifies the output format of the exposed resources, defaults to "1"
 *
 * @schema InProcessConfigurationSpecEnvVarsValueFromResourceFieldRefDivisor
 */
export class InProcessConfigurationSpecEnvVarsValueFromResourceFieldRefDivisor {
  public static fromNumber(value: number): InProcessConfigurationSpecEnvVarsValueFromResourceFieldRefDivisor {
    return new InProcessConfigurationSpecEnvVarsValueFromResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): InProcessConfigurationSpecEnvVarsValueFromResourceFieldRefDivisor {
    return new InProcessConfigurationSpecEnvVarsValueFromResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

